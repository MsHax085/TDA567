-------------------------------------1-----------------------------------
method Abs(x : int) returns (y : int) 
  ensures 0 <= y;
  ensures 0 <= x ==> y == x;
  ensures x < 0 ==> y == -x;
{
  if (x < 0)
   {y := -x;}
  else
   {y := x;}
}

Postcondition R = (0 <= y) && (0 <= x ==> y == x) && (x < 0 ==> y == -x)

Setup:
wp(if x < 0 then y := -x else y := x, R)

By Conditional rule:
(x < 0) ==> wp(y := -x, R) &&
!(x < 0) ==> wp(y := x, R)

By Assignment Rule:
(x < 0) ==> R[y -> -x] 
&&
!(x < 0) ==> R[y -> x]
=
(x < 0) ==> (0 <= -x) && (0 <= x ==> -x == x) && (x < 0 ==> -x == -x)
&&
x >= 0 ==>  (0 <= x) && (0 <= x ==> x == x) && (x < 0 ==> x == -x)
=
true

because:
----------------------------------------
Clonsusion of implication is always true for all values of x in premise,
thus the implication is a tautology
(x < 0) ==> (0 <= -x) && (0 <= x ==> -x == x) && (x < 0 ==> -x == -x)
----------------------------------------
&&
----------------------------------------
Clonsusion of implication is always true for a true premise and always false for a false premise,
thus the implication is a tautology
x >= 0 ==>  (0 <= x) && (0 <= x ==> x == x) && (x < 0 ==> x == -x)
----------------------------------------





-------------------------------------2-----------------------------------
---------------2b-----------------------
method Q2(x : int, y : int) returns (big : int, small : int) 
  ensures big > small;
{
  if (x > y)
   {big, small := x, y;}
  else
   {big, small := y, x;}
}
----------------------------------------
R = big > small

wp(IF x > y THEN big := x; small := y ELSE big := y; small := x, R)

By Conditional Rule:
(x > y) ==> wp(big := x; small := y, R)
&&
!(x > y) ==> wp(big := y; small :=x, R)

By Sequential Rule:
(x > y) ==> wp(big := x, wp(small := y, R))
&&
(x <= y) ==> wp(big := y, wp(small :=x, R))

By Assignment Rule:
(x > y) ==> wp(big := x, R[small -> y])
&&
(x <= y) ==> wp(big := y, R[small -> x])

Simplification:
(x > y) ==> wp(big := x, big > y)
&&
(x <= y) ==> wp(big := y, big > x)

By Assignment Rule and simplification:
(x > y) ==>  x > y, 	Trivially true
&&
(x <= y) ==> y > x,		False when x == y
= 
false

The second implication will always be true aslong as x != y
Thus adding requires x != y to the dafny specification will
make it complete. 

method Q2(x : int, y : int) returns (big : int, small : int) 
  requires x != y;
  ensures big > small;
{
  if (x > y)
   {big, small := x, y;}
  else
   {big, small := y, x;}
}

-------------------------------------3-----------------------------------
---------------3b-----------------------

S1 =	res := 0;
		if (n0 >= 0) then (n := n0; m := m0) else (n := -n0; m := -m0)
S =		res := res + m; n := n - 1;

I =		(n >= 0) &&
		(n0 >= 0 ==> res == (n0 - n) * m) &&
		(n0 < 0 ==> res == (-n0 - n) * m);
		
wp(S1, while(0 < n), S);

1. Prove wp(S1, I) - I holds in S1

wp (res := 0; if (n0 >= 0) then (n := n0; m := m0) else (n := -n0; m := -m0); I)
wp (res := 0; (n0 >= 0 ==> wp(n := n0; m := m0; I)) && (n0 < 0 ==> wp(n := -n0; m := -m0, I)));
wp (res := 0; (n0 >= 0 ==> wp(n := n0; wp(m := m0, I))) && (n0 < 0 ==> wp(n := -n0; wp(m := -m0; I))));

wp (res := 0;
	(n0 >= 0 ==> wp(n := n0, wp(m := m0; (n >= 0 && (n0 >= 0 ==> res == (n0 - n) * m) && (n0 < 0 ==> res == (-n0 - n) * m))))) &&
	(n0 < 0 ==> wp(n := -n0; wp(m := -m0; (n >= 0 && (n0 >= 0 ==> res == (n0 - n) * m) && (n0 < 0 ==> res == (-n0 - n) * m))))));
	
wp (res := 0;
	(n0 >= 0 ==> wp(n := n0, (n >= 0 && (n0 >= 0 ==> res == (n0 - n) * m0) && (n0 < 0 ==> res == (-n0 - n) * m0)))) &&
	(n0 < 0 ==> wp(n := -n0; (n >= 0 && (n0 >= 0 ==> res == (n0 - n) * -m0) && (n0 < 0 ==> res == (-n0 - n) * -m0)))));
	
wp (res := 0;
	(n0 >= 0 ==> (n0 >= 0 && (n0 >= 0 ==> res == (n0 - n0) * m0) && (n0 < 0 ==> res == (-n0 - n0) * m0))) &&
	(n0 < 0 ==> (-n0 >= 0 && (-n0 >= 0 ==> res == (n0 + n0) * -m0) && (n0 < 0 ==> res == (-n0 + n0) * -m0))));
	
(n0 >= 0 ==> (n0 >= 0 && (n0 >= 0 ==> 0 == (n0 - n0) * m0) && (n0 < 0 ==> 0 == (-n0 - n0) * m0))) &&
(n0 < 0 ==> (-n0 >= 0 && (-n0 >= 0 ==> 0 == (n0 + n0) * -m0) && (n0 < 0 ==> 0 == (-n0 + n0) * -m0)));

(n0 >= 0 ==>
	(n0 >= 0 &&
	(n0 >= 0 ==> 0 == (n0 - n0) * m0) &&
	(n0 < 0 ==> 0 == (-n0 - n0) * m0))) &&
	
(n0 < 0 ==>
	(-n0 >= 0 &&
	(-n0 >= 0 ==> 0 == (n0 + n0) * -m0) &&
	(n0 < 0 ==> 0 == (-n0 + n0) * -m0)))
	

(n0 >= 0 ==>
	(n0 >= 0 &&								(true)
	(n0 >= 0 ==> 0 == 0) &&					(true)
	(n0 < 0 ==> 0 == -2 * n0 * m0))) &&		(true)
	
(n0 < 0 ==>
	(-n0 >= 0 &&							(true)
	(n0 >= 0 ==> 0 == -2 * n0 * m0) &&		(true)
	(n0 < 0 ==> 0 == 0)))					(true)
	
Thus true.

2. Prove wp(S, I) - I holds in S

wp (res := res + m; n := n - 1; I);
wp (res := res + m; wp(n := n - 1; I));
wp (res := res + m;
	wp (n := n - 1;
	(n >= 0 && (n0 >= 0 ==> res == (n0 - n) * m) && (n0 < 0 ==> res == (-n0 - n) * m))));

(n - 1 >= 0 && (n0 >= 0 ==> (res + m) == (n0 - (n - 1)) * m) && (n0 < 0 ==> (res + m) == (-n0 - (n - 1)) * m));
(n >= 1 && (n0 >= 0 ==> (res + m) == (n0 - n + 1) * m) && (n0 < 0 ==> (res + m) == (-n0 - n + 1) * m));
(n >= 1 && (n0 >= 0 ==> (res + m) == (n0 - n) * m + m) && (n0 < 0 ==> (res + m) == (-n0 - n) * m + m));
(n > 0 && (n0 >= 0 ==> res == (n0 - n) * m) && (n0 < 0 ==> res == (-n0 - n) * m));

I && (loop condition) = I && (0 < n)
(n >= 0 && (n0 >= 0 ==> res == (n0 - n) * m) && (n0 < 0 ==> res == (-n0 - n) * m)) && (0 < n);
(n >= 0) && (0 < n) = 0 < n;
(n > 0 && (n0 >= 0 ==> res == (n0 - n) * m) && (n0 < 0 ==> res == (-n0 - n) * m));

wp(S, I) <==> I && (loop condition);

Thus:
I && (loop condition) ==> wp (S, I);

3. Prove loop condition

I && (loop condition) ==> (n decreases) > 0

True since loop condition n > 0

4. Decreasing n

wp (n2 := n; res := res + m; n := n - 1; n2 > n);
wp (n2 := n; wp(res := res + m; wp(n := n - 1; n2 > n))=;
wp (n2 := n; wp(res := res + m; n2 > n - 1));
wp (n2 := n; n2 > n - 1);
(n > n - 1);

Always true.

5. Ensure (res == n0 * m0) holds

I && !(loop condition) ==> (n >= 0 && (n0 >= 0 ==> res == (n0 - n) * m) && (n0 < 0 ==> res == (-n0 - n) * m)) && (0 >= n);
I && !(loop condition) ==> (n == 0 && (n0 >= 0 ==> res == (n0) * m) && (n0 < 0 ==> res == (-n0) * m));

(n == 0 && (n0 >= 0 ==> res == (n0 - n) * m) && (n0 < 0 ==> res == (-n0 - n) * m)) ==> (res == n0 * m0)

If n0 >= 0 holds, then m must be m0 and res therefore must be n0 * m0
If n0 < 0 holds, then m must me -m0 and res therefore must be n0 * m0

Because (n0 >= 0) OR (n0 < 0) == TRUE
This must hold: I && !(loop condition) ==> (res == n0 * m0)

-------------------------------------4-----------------------------------
---------------4b-----------------------

method ComputeFact(n : nat) returns (res : nat)
  requires n > 0;
  ensures res == fact(n);
 {
  res := 1;
  var i := 2;
  while (i <= n) 
  invariant res == fact(i-1) && n >= i -1;   
  decreases n-i;             
  {
    res := res * i;
    i := i + 1;
  }
 }
 
 Pre	n > 0
 Post 	res = fact(n)
 E		i <= n
 I		res == fact(i-1) && n >= i-1
 D 		n-i
 S		res := 1; i := 2;
 S2		res := res * i; i := i + 1;
 Q		res == fact(n)

 Only proving correctness of loop:
 wp(while E I D S2, Q)=
	I 
	&& (E && I ==> wp(S2, I))
	&& (!E && I ==> Q)
	
	&& (I ==> D >= 0)
	&& (E && I ==> wp(tmp := D; S2, tmp > D)))
	
	-----------------(E && I ==> wp(S2, I))-----------------------
	
	(E && I ==> wp(S2, I)) = 
	
	i <= n && res == fact(i-1) && n >= i-1 ==>
	wp(res := res * i; i := i + 1, res == fact(i-1) && n >= i-1)
	
	By Sequential Rule:
	i <= n && res == fact(i-1) && n >= i-1 ==>
	wp(res := res * i; wp(i := i + 1, res == fact(i-1) && n >= i-1))
	
	By Assignment Rule:
	i <= n && res == fact(i-1) && n >= i-1 ==>
	wp(res := res * i; res == fact((i+1)-1) && n >= (i+1)-1)
	
	By Assignment Rule && Simplification:
	i <= n && res == fact(i-1) && n >= i-1 ==>
	wp(res := res * i, res == fact(i) && n >= i)
	=
	i <= n && res == fact(i-1) && n >= i-1 ==>
	res * i == fact(i) && n >= i
	=
	i <= n && res == fact(i-1) ==>
	res * i == fact(i) && n >= i
	=
	res == fact(i-1) ==> res * i == fact(i)
	
	true since: 
		fact(i-1) * i == fact(i)
	
	-----------------(!E && I ==> Q)-----------------------

	(!E && I ==> Q) =
	
	!(i <= n) && res == fact(i-1) && n >= i-1 ==>
	res == fact(n)
	=
	i > n && res == fact(i-1) && n >= i-1 ==>
	res == fact(n)
	=
	i > n && res == fact(i-1) && i <= n+1 ==>
	res == fact(n)
	=
	res == fact(i-1) && n == i-1 ==>
	res == fact(n)
	= 
	True
	
	-----------------(I ==> D >= 0)-----------------------
	
	res == fact(i-1) && n >= i-1 ==>
	n-i >= 0
	= {Q -> P <-> !Q || P}
	!(res == fact(i-1) && n >= i-1) || (n >= i)
	={De Morgans law !(A&&B) <-> !A || ! B}
	!(res== fact(i-1)) || !(n >=i-1) || (n >= i)
	=
	True?
	
	-----------------(E && I ==> wp(tmp := D; S2, tmp > D)))-----------------------
	
	i <= n && res == fact(i-1) && n >= i-1 ==>
	wp(tmp := n-i; res := res * i; i := i + 1, tmp > n-i))
	
	By Sequential Rule:
	i <= n && res == fact(i-1) && n >= i-1 ==>
	wp(tmp := n-i; res := res * i; wp(i := i + 1, tmp > n -i))
	
	By Sequential Rule:
	i <= n && res == fact(i-1) && n >= i-1 ==>
	wp(tmp := n-i; wp(res := res * i, wp(i := i + 1, tmp > n -i)))
	
	By Assignment Rule:
	i <= n && res == fact(i-1) && n >= i-1 ==>
	wp(tmp := n-i; wp(res := res * i, tmp > n -(i+1)))
	
	By Assignment Rule:
	i <= n && res == fact(i-1) && n >= i-1 ==>
	wp(tmp := n-i, tmp > n -i-1)
	
	By Assignment Rule:
	i <= n && res == fact(i-1) && n >= i-1 ==>
	n-i > n-i-1
	
	Simplification:
	i <= n && res == fact(i-1) && n >= i-1 ==>
	n-i > n-i-1
	=
	i <= n && res == fact(i-1) && n >= i-1 ==>
	n > n-1
	
	Trivially true since conclusion of implication is true.
	
	------------------(Pre ==> wp(S,wp(while E I D S2, Q)))----------------------
	
	n > 0 ==> wp(res := 1; i := 2, res == fact(i-1) && n >= i-1 )
	
	By Sequential Rule:
	n > 0 ==> wp(res := 1, wp(i := 2, res == fact(i-1) && n >= i-1))
	
	By Assignment Rule:
	n > 0 ==> wp(res := 1, res == fact(2-1) && n >= 2-1)
	
	By Assignment Rule:
	n > 0 ==> 1 == fact(2-1) && n >= 2 - 1
	=
	n > 0 ==> n >= 1
	
	Trivially true
