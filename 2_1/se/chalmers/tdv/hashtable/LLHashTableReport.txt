The duplicate bug:
This bug was found with the test "put". The test generated several
new hashEntries for the same key which isn't expected observable behaviour
	Example test: 	Testing property: put
					Bug found! Shrinking .. Shrunk from a context of 5 steps, to 0 steps.
					Number of buckets= 1
					Commands 1: [put(1, 1), put(1, 2), put(1, 3), remove(3)]
					Commands 2: [put(1, 3)]
					Result 1:   [{ nrBuckets: 1, buffer: [(1, 3) :: (1, 2) :: (1, 1) :: null]}, []]
					Result 2:   [{ nrBuckets: 1, buffer: [(1, 3) :: null]}, []]
	
	The test should overwrite the value for the hashEntry with key = 1, which it doesn't.
	
	Fix: Add check if the key is present in the HashTable and update that hashEntries value if present, if not add hashEntry
					int index = hashOf(key);
					HashEntry entry = find(key);
					if (entry == null) {
						entry = new HashEntry(key, value, this.buffer[index]);
						this.buffer[index] = entry;
					} else {
						entry.value = value;
					}
					
The remove bug:
This bug was found since it was present in the tests: "commutePut, removeUnmodified and removeModified"
The tests do not remove hashEntries as expected and relinks the hashEntries wrongly
	Example test:	Testing property: commutePut
					Bug found! Shrinking .. Shrunk from a context of 10 steps, to 1 steps.
					Number of buckets= 1
					Commands 1: [put(1, 4), put(2, 5)]
					Commands 2: [put(2, 5), put(1, 4)]
					Suffix:     [remove(2)]
					Result 1:   [{ nrBuckets: 1, buffer: [(2, 5) :: (1, 4) :: null]}, []]
					Result 2:   [{ nrBuckets: 1, buffer: [(1, 4) :: null]}, []]
					
	The test should both remove the hashEntry with key = 2
	
	Fix: Add check if the first element is the key to remove and then relink and updates buffer.
					int index = hashOf(key);
					HashEntry prev = null, el = this.buffer[index];
					while (el != null) {
						if (el.key == key) {
							if (prev != null) 
								prev.next = el.next;
							else 
								buffer[index] = el.next;
						}
						prev = el;
						el = el.next;
					}