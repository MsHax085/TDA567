class Token{
	var fingerprint : int;
	var securityclearance : int;
	var valid : bool;
	
	constructor init(finger : int, clearance : int)
		modifies this;
		ensures fingerprint == finger;
		ensures securityclearance == clearance;
		ensures valid == true;
		{
			valid := true;
			fingerprint := finger;
			securityclearance := clearance;
		}
	
	method cancelToken()
		modifies `valid;
		requires valid == true;
		ensures valid == false;
		{
			valid := false;
		}
}

class EnrollmentStation{
	var enrolledUsers : map<int, User>;
	
	method init()
		modifies this;
		ensures |enrolledUsers| == 0;
		{
			enrolledUsers := map[];
		}
		
	method createUser(fingerprint : int, clearance : int) returns (user : User)
		modifies `enrolledUsers;
		requires fingerprint !in enrolledUsers;
		requires clearance == 1 || clearance == 2 || clearance ==3;
    
		ensures enrolledUsers == old(enrolledUsers)[fingerprint := user];
		ensures fingerprint in enrolledUsers;
		ensures enrolledUsers[fingerprint] == user;
		ensures user != null;
		ensures user.fingerprint == fingerprint;
		ensures user.token != null;
		ensures user.token.valid == true;
		ensures user.token.fingerprint == fingerprint;
		ensures user.token.securityclearance == clearance;
		{
    		var newToken := new Token.init(fingerprint, clearance);
    		var newUser := new User.init(fingerprint, newToken);
    		enrolledUsers := enrolledUsers[fingerprint := newUser];
    		return newUser; 
		}
}


class IDStation{
	var requiredsecurity : int;
	var alarmState : bool;
	var doorState : bool;
	
	constructor init(requiredsecurity : int)
		modifies this;
		requires requiredsecurity == 3 || requiredsecurity == 2 || requiredsecurity == 1;
		ensures this.requiredsecurity == requiredsecurity && !alarmState && !doorState;
		{
			this.requiredsecurity := requiredsecurity;
			alarmState := false;
			doorState := false;
		}
		
	method requestAccess(user : User, scannedFP : int) returns (valid : bool)
		modifies user.token`valid, this`alarmState, this`doorState; 
		requires user != null;
		requires user.token != null;
		requires user.token.valid == true;
		requires user.token.fingerprint == user.fingerprint;
		requires user.token.securityclearance >= requiredsecurity;
		ensures old(!user.token.valid || user.token.fingerprint!=scannedFP) ==> !valid && !user.token.valid && alarmState && !doorState;
		ensures old(user.token.valid && user.token.fingerprint==scannedFP && user.token.securityclearance >= requiredsecurity) ==> valid && !alarmState && user.token.valid && doorState;
		ensures old(user.token.valid && user.token.fingerprint==scannedFP && user.token.securityclearance < requiredsecurity) ==> !valid && alarmState && doorState && user.token.valid;
		{
 			var token := user.token;
			if (token.valid) {
				if (token.fingerprint == scannedFP) {
					if (token.securityclearance >= requiredsecurity) {
						alarmState := false;
						doorState := true;
						valid := true;
						return;
					}
					alarmState := true;
					doorState := false;
					valid := false;
					return;   
				} else {
					user.token.valid := false;
					alarmState := true;
					doorState := false;
					valid := false;
					return;
				}
			}
		}
  
	method closeDoor()
		modifies `doorState;
		requires doorState == true;
		ensures doorState == false;
		{
			doorState := false;
		}
}

class User{
	var fingerprint: int;
	var token: Token

	constructor init(fingerprint : int, t : Token)
		modifies this;
		ensures this.fingerprint == fingerprint;
		ensures this.token == t;
		{
			this.fingerprint := fingerprint;
			this.token := t;
		}
}

class Test {
	method main()
	{
		var ERS := new EnrollmentStation.init();
		var user1LvL1 := ERS.createUser(1,1);
		var user2LvL2 := ERS.createUser(2,2);
		var user3LvL3 := ERS.createUser(3,3);
    var doorLvL1 := new IDStation.init(1);
		var doorLvL2 := new IDStation.init(2);
    var doorLvL3 := new IDStation.init(3);
    
		assert user1LvL1.fingerprint in ERS.enrolledUsers;
		assert user1LvL1.token.valid == true;
		assert user1LvL1.token.fingerprint == 1;
		assert user1LvL1.token.securityclearance == 1;
		assert user1LvL1.fingerprint == 1;
		
		assert user2LvL2.fingerprint in ERS.enrolledUsers;
		assert user2LvL2.token.valid == true;
		assert user2LvL2.token.fingerprint == 2;
		assert user2LvL2.token.securityclearance == 2;
		assert user2LvL2.fingerprint == 2;
		
		assert user3LvL3.fingerprint in ERS.enrolledUsers;
		assert user3LvL3.token.valid == true;
		assert user3LvL3.token.fingerprint == 3;
		assert user3LvL3.token.securityclearance == 3;
		assert user3LvL3.fingerprint == 3;
    
    assert doorLvL1.requiredsecurity == 1;
    assert doorLvL1.alarmState == false;
    assert doorLvL1.doorState == false;
    
    assert doorLvL2.requiredsecurity == 2;
    assert doorLvL2.alarmState == false;
    assert doorLvL2.doorState == false;
    
    assert doorLvL3.requiredsecurity == 3;
    assert doorLvL3.alarmState == false;
    assert doorLvL3.doorState == false;
    
    var boolean : bool;
    boolean := doorLvL1.requestAccess(user1LvL1, 1);
    assert boolean == true;
	}
}
