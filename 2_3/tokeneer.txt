class Token{
	var fingerprint : int;
	var securityclearance : int;
	var valid : bool;
	
	constructor init(finger : int, clearance : int)
		modifies this;
		ensures fingerprint == finger;
		ensures securityclearance == clearance;
		ensures valid == true;
		{
			valid := true;
			fingerprint := finger;
			securityclearance := clearance;
		}
	
	method cancelToken()
		modifies `valid;
		requires valid == true;
		ensures valid == false;
		{
			valid := false;
		}
}

class EnrollmentStation{
	var enrolledUsers : map<int, User>;
	
	method init()
		modifies this;
		ensures |enrolledUsers| == 0;
		{
			enrolledUsers := map[];
		}
		
	method createUser(user : User, fingerprint: int, clearance : int)
		modifies `enrolledUsers, user`token, user.token;
		requires fingerprint !in enrolledUsers;
    requires clearance == 1 || clearance == 2 || clearance == 3;
    requires user !=null;
    requires user.token == null;
		ensures fingerprint in enrolledUsers;
		ensures enrolledUsers[fingerprint] == user;
		ensures user.token != null;
		ensures user.token.securityclearance == clearance;
		ensures user.token.fingerprint == fingerprint;
    ensures user.token.valid == true;
		{
    		user.token := new Token.init(fingerprint, clearance);
    		enrolledUsers := enrolledUsers[fingerprint := user];
		}
}


class IDStatation{
	var requiredsecurity : int;
	var alarmState : bool;
	var doorState : bool;
	
	constructor init(requiredsecurity : int)
		modifies this;
		requires requiredsecurity == 3 || requiredsecurity == 2 || requiredsecurity == 1;
		ensures this.requiredsecurity == requiredsecurity && !alarmState && !doorState;
		{
			this.requiredsecurity := requiredsecurity;
			alarmState := false;
			doorState := false;
		}
		
	method requestAccess(user : User, scannedFP : int) returns (valid : bool)
		modifies user.token`valid, this`alarmState, this`doorState; 
		requires user != null;
		requires user.token != null;
		requires user.token.valid == true;
		requires user.token.fingerprint == user.fingerprint;
		requires user.token.securityclearance >= requiredsecurity;
		ensures old(!user.token.valid || user.token.fingerprint!=scannedFP) ==> !valid && !user.token.valid && alarmState && !doorState;
		ensures old(user.token.valid && user.token.fingerprint==scannedFP && user.token.securityclearance >= requiredsecurity) ==> valid && !alarmState && user.token.valid && doorState;
		ensures old(user.token.valid && user.token.fingerprint==scannedFP && user.token.securityclearance < requiredsecurity) ==> !valid && alarmState && doorState && user.token.valid;
		{
 			var token := user.token;
			if (token.valid) {
				if (token.fingerprint == scannedFP) {
					if (token.securityclearance >= requiredsecurity) {
						alarmState := false;
						doorState := true;
						valid := true;
						return;
					}
					alarmState := true;
					doorState := false;
					valid := false;
					return;   
				} else {
					user.token.valid := false;
					alarmState := true;
					doorState := false;
					valid := false;
					return;
				}
			}
		}
  
	method closeDoor()
		modifies `doorState;
		requires doorState == true;
		ensures doorState == false;
		{
			doorState := false;
		}
}

class User{
	var fingerprint: int;
	var token: Token

	constructor init(fingerprint : int)
		modifies this;
		ensures this.fingerprint == fingerprint;
		ensures this.token == null;
		{
			this.fingerprint := fingerprint;
			this.token := null;
		}
}

class Test {
	method main()
	{
		var boolean : bool;
		var ERS := new EnrollmentStation.init();
		var user1LvL1 := new User.init(1);
    var user2LvL3 := new User.init(2);
    ERS.createUser(user1LvL1, 1,1);
    ERS.createUser(user2LvL3, 2,3);
    assert user1LvL1.token.valid;
    assert user1LvL1.token.securityclearance == 1;
    assert user1LvL1.token.fingerprint == 1;
    assert user1LvL1.fingerprint == 1;
    assert user2LvL3.token.valid;
    assert user2LvL3.token.securityclearance == 3;
    assert user2LvL3.token.fingerprint == 2;
    assert user2LvL3.fingerprint == 2;
	
	}
 }
