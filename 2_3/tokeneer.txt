class Token{
	var fingerprint : int;
	var securityclearance : int;
	var valid : bool;
	
	constructor init(finger : int, clearance : int)
		modifies this;
		ensures fingerprint == finger;
		ensures securityclearance == clearance;
		ensures valid == true;
		{
			valid := true;
			fingerprint := finger;
			securityclearance := clearance;
		}
	
}

class EnrollmentStation{
	var enrolledUsers : map<int, User>;
	
	constructor init()
		modifies this;
		ensures |enrolledUsers| == 0;
		{
			enrolledUsers := map[];
		}
}


class IDStatation{
	var requiredsecurity : int;
	var alarmState : bool;
	var doorState : bool;
	
	constructor init(requiredsecurity : int)
		modifies this;
		requires requiredsecurity == 3 || requiredsecurity == 2 || requiredsecurity == 1;
		ensures this.requiredsecurity == requiredsecurity && !alarmState && !doorState;
		{
			this.requiredsecurity := requiredsecurity;
			alarmState := false;
			doorState := false;
		}
  
	predicate validateSecurityClearance(token : Token)
		reads this, token;
		requires token != null;
		{
			token.securityclearance >= requiredsecurity
		}
  
	predicate validatefingerprint(token: Token, scannedFingerprint : int)
		reads this, token;
		requires token != null;
		{
		token.fingerprint == scannedFingerprint
		}
}

class User{
	var token: Token

	constructor init()
		modifies this;
		ensures this.token == null;
		{
			this.token := null;
		}
}
